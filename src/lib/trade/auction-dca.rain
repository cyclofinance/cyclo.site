raindex-version: 8898591f3bcaa21dc91dc3b8584330fc405eadfa

networks:
  flare:
    rpc: https://rpc.ankr.com/flare
    chain-id: 14
    network-id: 14
    currency: FLR

subgraphs:
  flare: https://example.com/subgraph

metaboards:
  flare: https://api.goldsky.com/api/public/project_clv14x04y9kzi01saerx7bxpg/subgraphs/mb-flare-0x893BBFB7/0.1/gn

orderbooks:
  flare:
    address: 0xCEe8Cd002F151A536394E564b84076c41bBBcD4d

deployers:
  flare:
    address: 0xE3989Ea7486c0F418C764e6c511e86f6E8830FAb

tokens:
  cysflr:
    network: flare
    address: 0x19831cfB53A0dbeAD9866C43557C1D48DfF76567
    decimals: 18
  cyweth:
    network: flare
    address: 0xd8BF1d2720E9fFD01a2F9A2eFc3E101a05B852b4
    decimals: 18

orders:
  sell-cysflr:
    orderbook: flare
    inputs:
      - token: input
    outputs:
      - token: cysflr
  sell-cyweth:
    orderbook: flare
    inputs:
      - token: input
    outputs:
      - token: cyweth
  flare:
    orderbook: flare
    inputs:
      - token: input
    outputs:
      - token: output

scenarios:
  flare:
    orderbook: flare
    runs: 1
    bindings:
      raindex-subparser: 0xFe2411CDa193D9E4e83A5c234C7Fd320101883aC
      subparser-0: 0x915E36ef882941816356bC3718Df868054F868aD
      baseline-fn: '''start-price-relative-baseline'
      initial-io-fn: '''start-price-relative-initial'
      shy-epoch: 0.05

deployments:
  flare:
    order: flare
    scenario: flare
  sell-cysflr:
    order: sell-cysflr
    scenario: flare
  sell-cyweth:
    order: sell-cyweth
    scenario: flare

gui:
  name: Auction based cost averaging
  description: https://raw.githubusercontent.com/rainlanguage/rain.strategies/e25bc4876b5ffb8bb28097b0ca66de291c75ff56/src/auction-dca.md
  short-description:  >
    A strategy that aims to fill a time-based budget via looping auctions - useful for breaking up large trades into smaller amounts or smoothing out market volatility for regular investments.
  deployments:
    flare:
      name: Flare
      description: Deploy an auction-based cost averaging strategy on Flare.
      deposits:
        - token: output
      fields:
        - binding: time-per-amount-epoch
          name: Budget period (in seconds)
          description: >
            The budget is spent over this time period.

            For example, if the budget is daily then this is 86400 seconds (24 * 60 * 60).
          show-custom-field: true
          presets:
            - name: Per minute (60)
              value: 60
            - name: Per hour (3600)
              value: 3600
            - name: Per day (86400)
              value: 86400
            - name: Per week (604800)
              value: 604800
            - name: Per 30 days (2592000)
              value: 2592000
            - name: Per 365 days (31536000)
              value: 31536000
        - binding: amount-per-epoch
          name: Budget (${order.outputs.0.token.symbol} per period)
          description: >
            The amount of ${order.outputs.0.token.symbol} to spend each budget period.

            For example, if the budget is daily and this is 10 then 10 ${order.outputs.0.token.symbol} will be sold for ${order.inputs.0.token.symbol} each day.
        - binding: max-trade-amount
          name: Maximum trade size (${order.outputs.0.token.symbol})
          description: >
            The maximum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: min-trade-amount
          name: Minimum trade size (${order.outputs.0.token.symbol})
          description: >
            The minimum amount of ${order.outputs.0.token.symbol} to sell in a single auction.
        - binding: time-per-trade-epoch
          name: Auction period (in seconds)
          description: >
            The auction period is the time between each auction price halvening.
          show-custom-field: true
          default: 3600
          presets:
            - name: Every 20 minutes (1200)
              value: 1200
            - name: Every 30 minutes (1800)
              value: 1800
            - name: Every hour (3600)
              value: 3600
            - name: Every 2 hours (7200)
              value: 7200
            - name: Every 3 hours (10800)
              value: 10800
            - name: Every 6 hours (21600)
              value: 21600
            - name: Every 12 hours (43200)
              value: 43200
            - name: Every 24 hours (86400)
              value: 86400
        - binding: start-price-input
          name: Start price (${order.inputs.0.token.symbol})
          description: >
            The current $ price of ${order.inputs.0.token.symbol} to kickoff trading.
        - binding: start-price-output
          name: Start price (${order.outputs.0.token.symbol})
          description: >
            The current $ price of ${order.outputs.0.token.symbol} to kickoff trading.
        - binding: baseline-relative-ratio
          name: Baseline relative ratio
          description: >
            The ratio of the start price to use as the baseline. For example, if this is 0.9 then the auction will never trade below 90% of the start price.
        - binding: initial-relative-ratio
          name: Kickoff relative ratio
          description: >
            The ratio of the start price to kickoff the first auction. For example, if this is 1.01 then the first auction will initialize at 1.01x the start price.
          default: 1.01
        - binding: next-trade-multiplier
          name: Auction start multiplier
          description: >
            The multiplier to apply to the last trade to kick off the next auction.
          show-custom-field: true
          default: 1.01
          presets:
            - name: 1.01x
              value: 1.01
            - name: 1.02x
              value: 1.02
            - name: 1.05x
              value: 1.05
            - name: 1.1x
              value: 1.1
        - binding: next-trade-baseline-multiplier
          name: Auction end multiplier
          description: >
            The multiplier to apply to the last trade to set the baseline for the next auction.
          show-custom-field: true
          default: 0
          presets:
            - name: Disabled (0)
              value: 0
            - name: 0.7x
              value: 0.7
            - name: 0.8x
              value: 0.8
            - name: 0.9x
              value: 0.9
            - name: 0.95x
              value: 0.95
            - name: 0.99x
              value: 0.99
      select-tokens:
        - key: input
          name: Token to Buy
          description: Select the token you want to purchase
        - key: output
          name: Token to Sell
          description: Select the token you want to sell

---
#raindex-subparser !Raindex subparser.
#subparser-0 !Subparser 0.

#time-per-amount-epoch !Duration of one unit of streaming amount halflife.
#amount-per-epoch !Amount of output token to approve for buying per epoch.
#min-trade-amount !Each trade must be at least this many output tokens.
#max-trade-amount !Each trade will be capped at this many tokens.

#time-per-trade-epoch !Duration of one unit of io ratio halflife.
#shy-epoch !Epoch below which only the minimum amount is offered.

#start-price-input !Price of the input token to start trading.
#start-price-output !Price of the output token to start trading.
#baseline-relative-ratio !Ratio of the start price to use as the baseline.
#initial-relative-ratio !Ratio of the start price to use as the initial io ratio.

#baseline-fn !Function to calculate the baseline for the next trade.
#initial-io-fn !Function to calculate the initial io ratio for the first trade.

#next-trade-multiplier !Start next auction at this x the last trade.
#next-trade-baseline-multiplier !Lifts the baseline to here relative to the previous trade.

#last-trade-time-key "last-trade-time"
#last-trade-io-key "last-trade-io"
#initial-time-key "initial-time"
#amount-used-key "amount-used"

#set-last-trade
last-io:,
:set(hash(order-hash() last-trade-time-key) now()),
:set(hash(order-hash() last-trade-io-key) last-io);

#set-initial-time
:set(hash(order-hash() initial-time-key) now());

#get-initial-time
_:get(hash(order-hash() initial-time-key));

#get-last-trade
last-time:get(hash(order-hash() last-trade-time-key)),
last-io:get(hash(order-hash() last-trade-io-key));

#get-epoch
initial-time: call<'get-initial-time>(),
last-time _: call<'get-last-trade>(),
duration: sub(now() any(last-time initial-time)),
total-duration: sub(now() initial-time),
ratio-freeze-amount-epochs: div(min-trade-amount amount-per-epoch),
ratio-freeze-trade-epochs: mul(ratio-freeze-amount-epochs div(time-per-amount-epoch time-per-trade-epoch)),
amount-epochs: div(total-duration time-per-amount-epoch),
trade-epochs: saturating-sub(div(duration time-per-trade-epoch) ratio-freeze-trade-epochs);

#amount-for-epoch
amount-epochs
trade-epochs:,
total-available: linear-growth(0 amount-per-epoch amount-epochs),
used: get(hash(order-hash() amount-used-key)),
unused: sub(total-available used),
decay: call<'halflife>(trade-epochs),
shy-decay: every(greater-than(trade-epochs shy-epoch) decay),
variable-component: sub(max-trade-amount min-trade-amount),
target-amount: add(min-trade-amount mul(variable-component shy-decay)),
capped-unused: min(unused target-amount);

#halflife
epoch:,
/**
 * Shrinking the multiplier like this
 * then applying it 10 times allows for
 * better precision when max-io-ratio
 * is very large, e.g. ~1e10 or ~1e20+
 *
 * This works because `power` loses
 * precision on base `0.5` when the
 * exponent is large and can even go
 * to `0` while the io-ratio is still
 * large. Better to keep the multiplier
 * higher precision and drop the io-ratio
 * smoothly for as long as we can.
 */
multiplier:
  power(0.5 div(epoch 10)),
val:
  mul(
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
    multiplier
  );

#io-for-epoch
epoch:,
last-io: call<'get-last-trade>(),
max-next-trade: any(mul(last-io next-trade-multiplier) call<'initial-io-fn>()),
baseline-next-trade: mul(last-io next-trade-baseline-multiplier),
real-baseline: max(baseline-next-trade call<'baseline-fn>()),
variable-component: saturating-sub(max-next-trade real-baseline),
above-baseline: mul(variable-component call<'halflife>(epoch)),
_: add(real-baseline above-baseline);

#start-price-io-ratio
/**
 * ( usd / output ) / ( usd / input )
 * = ( usd / output ) * ( input / usd )
 * = ( usd * input ) / ( output * usd )
 * = input / output
 */
_: div(start-price-output start-price-input);

#start-price-relative-baseline
start-ratio: call<'start-price-io-ratio>(),
_: mul(baseline-relative-ratio start-ratio);

#start-price-relative-initial
start-ratio: call<'start-price-io-ratio>(),
_: mul(initial-relative-ratio start-ratio);

#sflr-baseline
_: sflr-exchange-rate();

#sflr-baseline-inv
_: inv(sflr-exchange-rate());

#handle-add-order
using-words-from raindex-subparser subparser-0
:call<'set-initial-time>();

#calculate-io
using-words-from raindex-subparser subparser-0
amount-epochs
trade-epochs:call<'get-epoch>(),
max-output: call<'amount-for-epoch>(amount-epochs trade-epochs),
io: call<'io-for-epoch>(trade-epochs),
:call<'set-last-trade>(io);

#handle-io
min-amount: mul(min-trade-amount 0.9),
:ensure(greater-than-or-equal-to(output-vault-decrease() min-amount) "Min trade amount."),
used: get(hash(order-hash() amount-used-key)),
:set(hash(order-hash() amount-used-key) add(used output-vault-decrease()));
