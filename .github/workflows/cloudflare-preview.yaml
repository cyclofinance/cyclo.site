on:
  push:
    branches-ignore:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    name: Deploy to Cloudflare Pages
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G

      - run: nix develop -c npm ci
        working-directory: ./cyclo.sol
      - run: nix develop -c forge build
        working-directory: ./cyclo.sol
      - run: nix develop -c npm run codegen
      - run: nix develop -c npm run graphql-codegen
      - run: nix develop -c npm run build
        env:
          BASE_PATH: '/${{ github.event.repository.name }}'
          PUBLIC_WALLETCONNECT_ID: ${{ secrets.PUBLIC_WALLETCONNECT_ID }}
          PUBLIC_LAUNCHED: ${{ vars.PUBLIC_LAUNCHED }}

      - name: Publish
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: cyclo-staging # e.g. 'my-project'
          directory: build # e.g. 'dist'
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
