name: Deploy to GitHub Pages

on: [push]

jobs:
  build_site:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G

      - run: nix develop -c npm ci
        working-directory: ./cyclo.sol
      - run: nix develop -c forge build
        working-directory: ./cyclo.sol
      - run: nix develop -c npm run codegen
      - run: nix develop -c npm run graphql-codegen
      - run: nix develop -c npm run build
        env:
          BASE_PATH: '/${{ github.event.repository.name }}'
          PUBLIC_WALLETCONNECT_ID: ${{ secrets.PUBLIC_WALLETCONNECT_ID }}
          PUBLIC_LAUNCHED: ${{ vars.PUBLIC_LAUNCHED }}

      - name: Upload Artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'build/'

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build_site
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
